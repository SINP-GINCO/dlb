# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value
#    database_user: ogam
#    test.client.class: Ign\Bundle\OGAMConfigurateurBundle\Tests\Client

services:
#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]


    app.tablesgeneration:
        class: Ign\Bundle\GincoConfigurateurBundle\Utils\TablesGeneration
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%"]
        calls:
              - [setRequest, ["@request_stack"]]
              - [setPredefinedRequestGeneration, ['@app.predefinedrequestgeneration']]
        tags:
          - { name: monolog.logger, channel: ginco }

    app.copyutils:
        class: Ign\Bundle\GincoConfigurateurBundle\Utils\CopyUtils
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%"]
        tags:
          - { name: monolog.logger, channel: ginco }
        
    app.predefinedrequestgeneration:
        class: Ign\Bundle\GincoConfigurateurBundle\Utils\PredefinedRequestGeneration
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%"]
        tags:
          - { name: monolog.logger, channel: ginco }

    app.modelpublication:
        class: Ign\Bundle\OGAMConfigurateurBundle\Utils\ModelPublication
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%"]
        calls:
              - [setTablesGeneration, ['@app.tablesgeneration']]
              - [setCopyUtils, ['@app.copyutils']]
        tags:
          - { name: monolog.logger, channel: ginco }

    app.modelunpublication:
        class: Ign\Bundle\OGAMConfigurateurBundle\Utils\ModelUnpublication
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%"]
        tags:
          - { name: monolog.logger, channel: ginco }
        
    app.importmodelpublication:
        class: Ign\Bundle\OGAMConfigurateurBundle\Utils\ImportModelPublication
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%"]
        tags:
          - { name: monolog.logger, channel: ginco }
        
    app.importmodelunpublication:
        class: Ign\Bundle\OGAMConfigurateurBundle\Utils\ImportModelUnpublication
        arguments: ["@database_connection", "@logger"]
        tags:
          - { name: monolog.logger, channel: ginco }
        
    app.modelduplication:
        class: Ign\Bundle\OGAMConfigurateurBundle\Utils\ModelDuplication
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%"]
        tags:
          - { name: monolog.logger, channel: ginco }

    app.permissions:
        class: Ign\Bundle\GincoConfigurateurBundle\Utils\Permissions
        arguments: ["@database_connection", "@logger", "%database_admin_user%", "%database_admin_password%", "@translator"]
        calls:
              - [setModelPublication, ['@app.modelpublication']]
              - [setImportModelPublication, ['@app.importmodelpublication']]
        tags:
          - { name: monolog.logger, channel: ginco }

    app.resettomcatcaches:
        class: Ign\Bundle\OGAMConfigurateurBundle\Utils\ResetTomcatCaches
        arguments: ["@database_connection", "@logger"]
        tags:
          - { name: monolog.logger, channel: ginco }

    ign_ogamconfigurateur.validator.caseinsensitive:                               # Le nom du service
        class: Ign\Bundle\OGAMConfigurateurBundle\Validator\CaseInsensitiveValidator     # La classe du service, ici le validateur
        arguments: ["@doctrine.orm.metadata_work_entity_manager"]              # Les donn√©es qu'on injecte au service : l'EntityManager
        tags:
            - { name: validator.constraint_validator, alias: ign_ogamconfigurateur_caseinsensitive }  # C'est avec l'alias qu'on retrouve le service

    ign_gincoconfigurateur.file_field_auto_type_extension:
        class: Ign\Bundle\GincoConfigurateurBundle\Form\Extension\FileFieldAutoTypeExtension
        tags:
            - { name: form.type_extension, extended_type: Ign\Bundle\OGAMConfigurateurBundle\Form\FileFieldAutoType }

    # Twig extensions
    twig.route_exists_extension:
        class: Ign\Bundle\OGAMConfigurateurBundle\Twig\RouteExtension
        public: false
        arguments: ["@router"]
        tags:
            - { name: twig.extension }